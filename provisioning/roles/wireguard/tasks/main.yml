---
- name: Setup WireGuard preference
  copy:
    src: files/limit-unstable
    dest: /etc/apt/preferences.d/limit-unstable
    owner: root
    group: root
    mode: 0644

- name: Install GPG - required to add wireguard key
  apt:
    name: gnupg
    state: present

- name: Add WireGuard key
  apt_key:
    keyserver: "keyserver.ubuntu.com"
    id: "8B48AD6246925553"
    state: present

- name: Add WireGuard repository
  apt_repository:
    repo: "deb http://deb.debian.org/debian/ unstable main"
    state: present
    update_cache: yes

- name: Get architecture
  shell: dpkg --print-architecture
  register: dpkg_arch
  changed_when: False

- name: Install kernel headers to compile wireguard with DKMS
  apt:
    name:
      - "linux-headers-{{ dpkg_arch.stdout }}"
    state: present

##

- name: Install WireGuard
  package:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - wireguard-dkms
    - wireguard-tools

- name: Enable WireGuard kernel module
  modprobe:
    name: wireguard
    state: present
  register: wireguard_module_enabled
  until:  wireguard_module_enabled is succeeded
  retries: 10
  delay: 10
  failed_when: wireguard_module_enabled is failure

- name: Set WireGuard IP (without mask)
  set_fact:
    wireguard_ip: "{{ wireguard_address.split('/')[0] }}"

- name: Register if config/private key already exists on target host
  stat:
    path: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
  register: config_file_stat
  tags:
    - wg-generate-keys
    - wg-config

- name: Get wg subcommands
  command: "wg --help"
  register: wg_subcommands

- name: Set default value for wg_syncconf variable (assume wg syncconf subcommand not available)
  set_fact:
    wg_syncconf: false

- name: Check if wg syncconf subcommand is available
  set_fact:
    wg_syncconf: true
  when: wg_subcommands.stdout | regex_search('syncconf:')

- name: Show syncconf subcommand status
  debug:
    var: wg_syncconf

- block:
  - name: Generate WireGuard private key
    shell: "wg genkey"
    register: wg_private_key_result
    tags:
      - wg-generate-keys

  - name: Set private key fact
    set_fact:
      private_key: "{{ wg_private_key_result.stdout }}"
    tags:
      - wg-generate-keys
  when: not config_file_stat.stat.exists

- block:
  - name: Read WireGuard config file
    slurp:
      src: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    register: wg_config

  - name: Set private key fact
    set_fact:
      private_key: "{{ wg_config['content'] | b64decode | regex_findall('PrivateKey = (.*)') | first }}"
  when: config_file_stat.stat.exists

- name: Derive WireGuard public key
  shell: "echo '{{ private_key }}' | wg pubkey" # noqa 306
  register: wg_public_key_result
  changed_when: false

- name: Set public key fact
  set_fact:
    public_key: "{{ wg_public_key_result.stdout }}"

- name: Create WireGuard configuration directory
  file:
    dest: "{{ wireguard_remote_directory }}"
    state: directory
    mode: 0700

- name: Generate WireGuard configuration file
  template:
    src: wg.conf.j2
    dest: "{{ wireguard_remote_directory }}/{{ wireguard_interface }}.conf"
    owner: root
    group: root
    mode: 0600
  notify:
    - reconfigure wireguard

- name: Check if reload-module-on-update is set
  stat:
    path: "{{ wireguard_remote_directory }}/.reload-module-on-update"
  register: reload_module_on_update

- name: Set WireGuard reload-module-on-update
  file:
    dest: "{{ wireguard_remote_directory }}/.reload-module-on-update"
    state: touch
  when: not reload_module_on_update.stat.exists

- name: Start and enable WireGuard service wg-quick@{{ wireguard_interface }}
  service:
    name: "wg-quick@{{ wireguard_interface }}"
    state: started
    enabled: yes
